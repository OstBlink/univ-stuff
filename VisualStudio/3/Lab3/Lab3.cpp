#include <iostream>

int main() {
    double x, a, y;
    double y1, y2;

    // Ввод значений x и a
    std::cout << "Введите значение x: ";
    std::cin >> x;
    std::cout << "Введите значение a: ";
    std::cin >> a;

    // Используем ассемблер для вычисления y1 и y2
    __asm {
        // Загружаем x и a в регистры
        fld x           // Загружаем x на стек
        fld st(0)       // Копируем x (для y1)
        fld a           // Загружаем a на стек

        // Вычисление y1
        fabs            // Берем абсолютное значение x
        fld1           // Загружаем 1.0 (для сравнения с 4)
        fld1           // Загружаем 1.0 (для сравнения с 4)
        fadd st(0), st(1) // Получаем 2.0
        fld1           // Загружаем 1.0 (для сравнения с 4)
        fadd st(0), st(1) // Получаем 4.0

        fcomip st(0), st(2) // Сравниваем |x| с 4.0
        fstsw ax          // Сохраняем флаги в регистре ax
        sahf              // Загружаем флаги в регистр процессора

        jbe below_four     // Если |x| <= 4, переходим к below_four

        // Вычисление y1 = 2 * x
        fld st(1)         // Загружаем x
        fadd st(0), st(0) // Умножаем на 2 (2 * x)
        fstp y1           // Сохраняем результат в y1
        jmp end_y1        // Переходим к end_y1

        below_four :
        // Вычисление y1 = 4 + a
        fld a             // Загружаем a
            fadd st(0), st(1) // Сложение (4 + a)
            fstp y1           // Сохраняем результат в y1

            end_y1 :
        // Вычисление y2
        fld x             // Загружаем x
            fld a             // Загружаем a
            fcomip st(0), st(1) // Сравниваем x и a
            fstsw ax          // Сохраняем флаги в регистре ax
            sahf              // Загружаем флаги в регистр процессора

            jae x_greater_or_equal_a // Если x >= a, переходим к x_greater_or_equal_a

            // Вычисление y2 = a - x
            fld a             // Загружаем a
            fsub st(0), st(1) // Вычитание (a - x)
            fstp y2           // Сохраняем результат в y2
            jmp end_y2

            x_greater_or_equal_a :
        // Если x >= a, то y2 = 0 (или любое другое значение, если необходимо)
        fldz              // Загружаем 0.0
            fstp y2           // Сохраняем результат в y2

            end_y2 :
        // Вычисление y = y1 + y2
        fld y1            // Загружаем y1
            fld y2            // Загружаем y2
            fadd st(0), st(1) // Сложение (y = y1 + y2)
            fstp y            // Сохраняем результат в y

    }

    std::cout << "Результат y: " << y << std::endl;

    return 0;
}
